/**
 * Automatically generated by @grafana/openapi-to-k6: 0.3.2
 * Do not edit manually.
 * QuickPizza API
 * API to get pizza recommendations based on dietary restrictions.
 * Service version: 1.0.0
 */
import { URL } from "https://jslib.k6.io/url/1.0.0/index.js";

import http from "k6/http";
import type { Params, Response } from "k6/http";

export interface Restrictions {
  /** Maximum calories allowed per slice */
  maxCaloriesPerSlice?: number;
  /** Whether the pizza must be vegetarian */
  mustBeVegetarian?: boolean;
  /** List of ingredients to exclude */
  excludedIngredients?: string[];
  /** List of kitchen tools to avoid */
  excludedTools?: string[];
  /** Maximum number of toppings allowed */
  maxNumberOfToppings?: number;
  /** Minimum number of toppings required */
  minNumberOfToppings?: number;
  /** Optional custom name for the pizza */
  customName?: string;
}

/**
 * The recommended pizza
 */
export type PizzaRecommendationPizza = { [key: string]: unknown };

export interface PizzaRecommendation {
  /** The recommended pizza */
  pizza?: PizzaRecommendationPizza;
  /** Estimated calories per slice */
  calories?: number;
  /** Whether the pizza is vegetarian */
  vegetarian?: boolean;
}

/**
 * This is the base client to use for interacting with the API.
 */
export class QuickPizzaAPIClient {
  private cleanBaseUrl: string;
  private commonRequestParameters: Params;

  constructor(clientOptions: {
    baseUrl: string;
    commonRequestParameters?: Params;
  }) {
    this.cleanBaseUrl = clientOptions.baseUrl.replace(/\/+$/, "");

    this.commonRequestParameters = clientOptions.commonRequestParameters || {};
  }

  /**
   * @summary Get pizza recommendation
   */
  getPizzaRecommendation(
    restrictions: Restrictions,
    requestParameters?: Params,
  ): {
    response: Response;
    data: PizzaRecommendation;
  } {
    const url = new URL(this.cleanBaseUrl + `/api/pizza`);
    const mergedRequestParameters = this._mergeRequestParameters(
      requestParameters || {},
      this.commonRequestParameters,
    );
    const response = http.request(
      "POST",
      url.toString(),
      JSON.stringify(restrictions),
      {
        ...mergedRequestParameters,
        headers: {
          ...mergedRequestParameters?.headers,
          "Content-Type": "application/json",
        },
      },
    );
    let data;

    try {
      data = response.json();
    } catch {
      data = response.body;
    }
    return {
      response,
      data,
    };
  }

  /**
   * Merges the provided request parameters with default parameters for the client.
   *
   * @param {Params} requestParameters - The parameters provided specifically for the request
   * @param {Params} commonRequestParameters - Common parameters for all requests
   * @returns {Params} - The merged parameters
   */
  private _mergeRequestParameters(
    requestParameters?: Params,
    commonRequestParameters?: Params,
  ): Params {
    return {
      ...commonRequestParameters, // Default to common parameters
      ...requestParameters, // Override with request-specific parameters
      headers: {
        ...(commonRequestParameters?.headers || {}), // Ensure headers are defined
        ...(requestParameters?.headers || {}),
      },
      cookies: {
        ...(commonRequestParameters?.cookies || {}), // Ensure cookies are defined
        ...(requestParameters?.cookies || {}),
      },
      tags: {
        ...(commonRequestParameters?.tags || {}), // Ensure tags are defined
        ...(requestParameters?.tags || {}),
      },
    };
  }
}
